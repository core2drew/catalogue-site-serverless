{
  "service": {
    "service": "catalogue-app",
    "serviceObject": {
      "name": "catalogue-app"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "ap-southeast-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetFeaturedProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-getFeaturedProducts"
            }
          },
          "GetProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-getProducts"
            }
          },
          "GetProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-getProduct"
            }
          },
          "GetProductsByCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-getProductsByCategory"
            }
          },
          "GetProductCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-getProductCategories"
            }
          },
          "SendEnquiryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/catalogue-app-dev-sendEnquiry"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "catalogue-app",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/catalogue-app-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/catalogue-app-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "catalogue-app",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetFeaturedProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-getFeaturedProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFeaturedProductsLogGroup"
            ]
          },
          "GetProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-getProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsLogGroup"
            ]
          },
          "GetProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-getProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductLogGroup"
            ]
          },
          "GetProductsByCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-getProductsByCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsByCategoryLogGroup"
            ]
          },
          "GetProductCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-getProductCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductCategoriesLogGroup"
            ]
          },
          "SendEnquiryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z/catalogue-app.zip"
              },
              "Handler": "dist/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "catalogue-app-dev-sendEnquiry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendEnquiryLogGroup"
            ]
          },
          "GetFeaturedProductsLambdaVersion2wyI8XXYPCIYrhlsDWpBpAoYBABOX3vgj9SWN7bhU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFeaturedProductsLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "GetProductsLambdaVersionnuOIpFqYZCRrboQJ3yNTtb50DuxD1rSQ66vWVpOHoYM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "GetProductLambdaVersionKZkdv3Bs6Q9HyXlMOBGjvr41XovZSFkYdsCVnkmV1rY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "GetProductsByCategoryLambdaVersionF5gbRyhfvDf4963DM3VLtIJhUx6oTbw6R3Dqrpj6lI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsByCategoryLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "GetProductCategoriesLambdaVersionoFZFJyv0HSD8sXTQc6RWtdBnmVFI3xg7U8afGkTupc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductCategoriesLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "SendEnquiryLambdaVersionVFoaK1xCb6sNcXR8tq56rbSEgvliBqJB9Jw0PmcijVI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendEnquiryLambdaFunction"
              },
              "CodeSha256": "SIkj6dZE8PAEd4EJ13rAb1TM+QHoA0vb5FBRMk/0Fpg="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-catalogue-app",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetFeaturedProductsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFeaturedProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFeaturedProducts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFeaturedProductsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProductsFeatured": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /products/featured",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFeaturedProducts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFeaturedProducts"
          },
          "GetProductsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProducts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProductsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProducts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /products",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProducts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProducts"
          },
          "GetProductLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProduct": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProductLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProductsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /products/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProduct"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProduct"
          },
          "GetProductsByCategoryLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsByCategoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProductsByCategory": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProductsByCategoryLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProductsCategoryCategoryVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /products/category/{category}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProductsByCategory"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProductsByCategory"
          },
          "GetProductCategoriesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProductCategories": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProductCategoriesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetProductsCategories": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /products/categories",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProductCategories"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProductCategories"
          },
          "SendEnquiryLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendEnquiryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendEnquiry": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendEnquiryLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostSendDashenquiry": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /send-enquiry",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendEnquiry"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendEnquiry"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetFeaturedProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFeaturedProductsLambdaVersion2wyI8XXYPCIYrhlsDWpBpAoYBABOX3vgj9SWN7bhU"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-GetFeaturedProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsLambdaVersionnuOIpFqYZCRrboQJ3yNTtb50DuxD1rSQ66vWVpOHoYM"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-GetProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductLambdaVersionKZkdv3Bs6Q9HyXlMOBGjvr41XovZSFkYdsCVnkmV1rY"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-GetProductLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsByCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsByCategoryLambdaVersionF5gbRyhfvDf4963DM3VLtIJhUx6oTbw6R3Dqrpj6lI"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-GetProductsByCategoryLambdaFunctionQualifiedArn"
            }
          },
          "GetProductCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductCategoriesLambdaVersionoFZFJyv0HSD8sXTQc6RWtdBnmVFI3xg7U8afGkTupc"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-GetProductCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "SendEnquiryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendEnquiryLambdaVersionVFoaK1xCb6sNcXR8tq56rbSEgvliBqJB9Jw0PmcijVI"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-SendEnquiryLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-catalogue-app-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getFeaturedProducts": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/products/featured",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/products/featured"
          }
        ],
        "name": "catalogue-app-dev-getFeaturedProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetFeaturedProductsLambdaVersion2wyI8XXYPCIYrhlsDWpBpAoYBABOX3vgj9SWN7bhU"
      },
      "getProducts": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/products",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/products"
          }
        ],
        "name": "catalogue-app-dev-getProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProductsLambdaVersionnuOIpFqYZCRrboQJ3yNTtb50DuxD1rSQ66vWVpOHoYM"
      },
      "getProduct": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/products/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/products/{id}"
          }
        ],
        "name": "catalogue-app-dev-getProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProductLambdaVersionKZkdv3Bs6Q9HyXlMOBGjvr41XovZSFkYdsCVnkmV1rY"
      },
      "getProductsByCategory": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/products/category/{category}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/products/category/{category}"
          }
        ],
        "name": "catalogue-app-dev-getProductsByCategory",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProductsByCategoryLambdaVersionF5gbRyhfvDf4963DM3VLtIJhUx6oTbw6R3Dqrpj6lI"
      },
      "getProductCategories": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/products/categories",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/products/categories"
          }
        ],
        "name": "catalogue-app-dev-getProductCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProductCategoriesLambdaVersionoFZFJyv0HSD8sXTQc6RWtdBnmVFI3xg7U8afGkTupc"
      },
      "sendEnquiry": {
        "handler": "dist/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/send-enquiry",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/send-enquiry"
          }
        ],
        "name": "catalogue-app-dev-sendEnquiry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendEnquiryLambdaVersionVFoaK1xCb6sNcXR8tq56rbSEgvliBqJB9Jw0PmcijVI"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "catalogue-app",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Drew\\Documents\\test-sandro-calupe\\catalogue-app-backend\\.serverless\\catalogue-app.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/catalogue-app/dev/1701248428682-2023-11-29T09:00:28.682Z",
    "artifact": "catalogue-app.zip"
  }
}